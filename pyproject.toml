[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = false
exclude = []

[tool.ruff]
line-length = 88
target-version = "py310"

# Exclude a variety of commonly ignored directories.
exclude = [
	"whitelist.py", # for vulture
	".direnv",
	".eggs",
	".git",
	".mypy_cache",
	".nox",
	".pants.d",
	".ruff_cache",
	".tox",
	".venv",
	"__pypackages__",
	"_build",
	"buck-out",
	"build",
	"dist",
	"venv",
]

[tool.ruff.lint]
select = [
	# "ANN", # flake8-annotationsq
	"F",   # Pyflakes
	"E",   # pycodestyle Error
	"W",   # pycodestyle Warning
	# "C90", # mccabe: C901: {name} is too complex ({complexity})
	"I",   # isort: unsorted-imports, missing-required-import
	# "D",   # pydocstyle
	"B",   # flake8-bugbear
	# "UP",  # pyupgrade
	# "YTT", # flake8-2020
	"ASYNC1", # flake8-trio
	"BLE", # flake8-blind-except
	"B", # flake8-bugbear
	"A", # flake8-builtins
	"COM", # flake8-commas
	# "CPY", # flake8-copyright   --preview
	"C4",   # flake8-comprehensions
	"DTZ",  # flake8-datetimez
	"T10",  # flake8-debugger
	"DJ",   # flake8-django
	# "EXE",  # flake8-executable
	"FA",   # flake8-future-annotations
	"ISC",  # flake8-implicit-str-concat
	"ICN",  # flake8-import-conventions
	"G",    # flake8-logging-format
	"INP",  # flake8-no-pep420
	"PIE",  # flake8-pie
	# "T20",  # flake8-print
	# "PYI",  # flake8-pyi
	"PT",   # flake8-pytest-style
	"Q",    # flake8-quotes
	"RSE",  # flake8-raise
	"RET",  # flake8-return
	"SLF",  # flake8-self
	"SLOT", # flake8-slots
	"SIM",  # flake8-simplify
	"TID",  # flake8-tidy-imports
	"TCH",  # flake8-type-checking
	"INT",  # flake8-gettext
	# "ARG",  # flake8-unused-arguments
	# "PTH",   # flake8-use-pathlib
	"PD",  # pandas-vet
	"PGH", # pygrep-hooks
	"PL",  # Pylint
	# "TRY",   # tryceratops, they all sound BS
	# "FLY",   # flynt
	"NPY",  # NumPy-specific rules
	"AIR",  # Airflow
	# "PERF", # Perflint
	"FURB", # refurb   --preview
	"LOG",  # flake8-logging
	"RUF",  # Ruff-specific rules
]
ignore = [
	"PLR6301", # Method `...` could be a function, class method, or static method
	"LOG015",  # `debug()` call on root logger
	"COM812",  # Trailing comma missing
	"SLF",     # Private member accessed
	"DTZ005",  # The use of `datetime.datetime.now()` without `tz` argument is not allowed
	"PLR0913", # Too many arguments in function definition
	"PLR0914", # Too many local variables
	"PLR0915", # Too many statements
	"PLR0917", # Too many positional arguments
	"FURB101", # `open` and `read` should be replaced by `Path(rootConfJsonFile).read_text()`
	"FURB103", # `open` and `write` should be replaced by `Path(...
	"PLR2004", # Magic value used in comparison, consider replacing `...` with a constant variable
	"RUF005",  # Consider `[*_list, x]` instead of concatenation
	"PT009",   # Use a regular `assert` instead of unittest-style `assertEqual`, why?
	"D100",    # Missing docstring in public module
	"D101",    # Missing docstring in public class
	"D102",    # Missing docstring in public method
	"D103",    # Missing docstring in public function
	"D104",    # Missing docstring in public package
	"D105",    # Missing docstring in magic method
	"D107",    # Missing docstring in `__init__`
	"D205",    # 1 blank line required between summary line and description
	"D211",    # (Do not enable) no-blank-line-before-class
	"D212",    # multi-line-summary-first-line, conflicts with D213:multi-line-summary-second-line
	"D401",    # First line of docstring should be in imperative mood
	"D417",    # Missing argument descriptions in the docstring
	"E402",    # Module level import not at top of file
	"SIM105",  # Use contextlib.suppress({exception}) instead of try-except-pass
	"SIM117",  # Use a single with statement with multiple contexts...
	"SIM115",  # Use context handler for opening files
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = []


# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

mccabe.max-complexity = 13 # Unlike Flake8, default to a complexity level of 10.

